#include <stdio.h>

#include <curand.h>
#include <curand_kernel.h>
#include <chrono>
#include <iostream>

// #define MIDPOINT 1 << 16

__device__ unsigned int get_thread_index()
{
	return (blockIdx.x * blockDim.x) + threadIdx.x;
}


__global__ void determine_greatest_even_multiple(unsigned int *block, unsigned int *results) {
	const unsigned int thread_idx = get_thread_index();

    // TODO only include if?
    // unsigned int val = block[thread_idx];
    // unsigned int divisibleBy = 1;

    // while (val % 2 == 0) {
    //     divisibleBy *= 2;
    //     val /= 2;
    // }

    // results[thread_idx] = divisibleBy;

    // TODO this is the fallback

    if (block[thread_idx] % 2 == 0) {
        results[thread_idx] = 1;
    // } else {
    //     results[thread_idx] = 1;
    }
}

// __global__ void determine_even_values_(unsigned int *block, bool *results) { }

// 1MB
#define N 1048576 
#define BLOCK_SIZE 512
#define NUM_BLOCKS N/BLOCK_SIZE

#define ARRAY_SIZE N
#define ARRAY_SIZE_IN_BYTES (sizeof(unsigned int) * (ARRAY_SIZE))

bool sorter(unsigned int a, unsigned int b) {
    if (a % 2 == 0 && b % 2 == 0) {
        return a <= b ? a : b;
    } else if (a % 2 == 0) {
        return a;
    } else if (b % 2 == 0) {
        return b;
    }

    return a <= b ? a : b;
    
}

int main() {
	curandGenerator_t rng;
	curandCreateGeneratorHost(&rng, CURAND_RNG_PSEUDO_DEFAULT);


    // TODO operation should map to a boolean array that is then used to count the total number of numbers smaller than middle of max random value 
    // TODO reduction happens in cpu space, improvement cound be to do it in GPU


    // TODO use cudamemset to set values to false!


    // TODO add this in at the end!
    // curandSetPseudoRandomGeneratorSeed(rng, time(NULL));

	// TODO the seed of rng is the same run-to-run
	// if we wanted it to be different, I think we would set the seed of the rng using a number generated by the host?

    // TODO extract const
    // size_t dataSizeBytes = 8 * DATA_SIZE;

	unsigned int *input;
    unsigned int *output;
    // bool *output;

    unsigned int *inputCPU = (unsigned int*) malloc(ARRAY_SIZE_IN_BYTES);


    cudaMalloc((void **)&input, ARRAY_SIZE_IN_BYTES);
    cudaMalloc((void **)&output, ARRAY_SIZE_IN_BYTES);
    // cudaMemset(output, false , ARRAY_SIZE_IN_BYTES);


	// while this code is invoked from the host, it actually is run on device
	curandGenerate(rng, inputCPU, ARRAY_SIZE);
    for (int i = 0; i < ARRAY_SIZE; i++) {
        // printf("%u\n", inputCPU[i]);
    }
	cudaMemcpy(input, inputCPU, ARRAY_SIZE_IN_BYTES, cudaMemcpyHostToDevice);


    auto start = std::chrono::high_resolution_clock::now();
    // I needed to get this many iterations in order to actually get a measurable difference in time
    for (int i = 0; i < 100000; i++) {
        determine_greatest_even_multiple<<<NUM_BLOCKS, BLOCK_SIZE>>>(input, output);
    }
    auto stop = std::chrono::high_resolution_clock::now();

    // printf("%ld\n", time(NULL));
    // determine_greatest_even_multiple<<<1, DATA_SIZE>>>(input, output);
    // printf("%ld\n", time(NULL));

    // printf("%ld -> %ld", start, stop);

    std::cout << " Time elapsed GPU = " << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << "ns\n";

    unsigned int optimizedCPU[ARRAY_SIZE];
    unsigned int startIdx = 0;
    unsigned int endIdx = ARRAY_SIZE - 1;

    for (int i = 0; i < ARRAY_SIZE; i++) {
        if (inputCPU[i] % 2 == 0) {
            optimizedCPU[startIdx++] = inputCPU[i];
        } else {
            optimizedCPU[endIdx--] = inputCPU[i];
        }
    }

    cudaMemcpy(input, optimizedCPU, ARRAY_SIZE_IN_BYTES, cudaMemcpyHostToDevice);

    // cudaMemset(output, false , ARRAY_SIZE_IN_BYTES);
    start = std::chrono::high_resolution_clock::now();
    // I needed to get this many iterations in order for things to go even with having 
    for (int i = 0; i < 100000; i++) {
        determine_greatest_even_multiple<<<NUM_BLOCKS, BLOCK_SIZE>>>(input, output);
    }
    stop = std::chrono::high_resolution_clock::now();

    // printf("%ld\n", time(NULL));
    // determine_greatest_even_multiple<<<1, DATA_SIZE>>>(input, output);
    // printf("%ld\n", time(NULL));

    // printf("%ld -> %ld", start, stop);

    std::cout << " Time elapsed GPU = " << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << "ns\n";



    // std::sort(input, )

	// take the random numbers and transform them so that they are mod 3
	// while we could combine the generation and this into a single kernel, it seemed like a bit more configuration that I didn't want to deal with

	// clean up rng since we're done with it
	curandDestroyGenerator(rng);


    cudaFree(input);
    cudaFree(output);
    free(inputCPU);

    return EXIT_SUCCESS;
}